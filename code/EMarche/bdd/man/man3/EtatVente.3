.TH "EtatVente" 3 "Thu Dec 17 2015" "EMarche" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EtatVente \- 
.PP
Cette classe gère l'état d'une vente (enchère ou normale)  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <EtatVente\&.h>\fP
.PP
Inherited by \fBVenteEnchere\fP, and \fBVenteNormale\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEtatVente\fP (bool b)"
.br
.RI "\fIConstructeur de la classe \fBEtatVente\fP\&. \fP"
.ti -1c
.RI "bool \fBtypeVente\fP ()"
.br
.RI "\fICette fonction indique la type de la vente\&. Si elle retourne true, c'est une vente aux enchères, sinon c'est une vente normale\&. \fP"
.ti -1c
.RI "virtual float \fBgetPrixActuel\fP ()"
.br
.RI "\fICette fonction virtuelle retourne le prix actuel de la vente\&. \fP"
.ti -1c
.RI "virtual std::string \fBgetDateLimite\fP ()"
.br
.RI "\fICette fonction virtuelle retourne la date limite de l'enchère\&. \fP"
.ti -1c
.RI "virtual void \fBsetPrixActuel\fP (float prix)"
.br
.RI "\fICette fonction virtuelle fixe le prix actuel\&. \fP"
.ti -1c
.RI "virtual void \fBsetDateLimite\fP (struct tm date)"
.br
.RI "\fICette fonction virtuelle fixe la date limite\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "bool \fBtypeDeVente\fP"
.br
.RI "\fIBooléen qui distingue une vente normale d'une vente aux enchères\&. \fP"
.ti -1c
.RI "float \fBprixActuel\fP"
.br
.RI "\fIPrix actuel\&. \fP"
.ti -1c
.RI "struct tm \fBdateLimite\fP"
.br
.RI "\fIDate limite avant la fin de l'enchère\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Cette classe gère l'état d'une vente (enchère ou normale) 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EtatVente::EtatVente (boolb)"

.PP
Constructeur de la classe \fBEtatVente\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP - Booléen qui donne le type de la vente 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "std::string EtatVente::getDateLimite ()\fC [virtual]\fP"

.PP
Cette fonction virtuelle retourne la date limite de l'enchère\&. 
.PP
\fBReturns:\fP
.RS 4
Un string contenant la date limite de l'enchère 
.RE
.PP

.PP
Reimplemented in \fBVenteEnchere\fP\&.
.SS "float EtatVente::getPrixActuel ()\fC [virtual]\fP"

.PP
Cette fonction virtuelle retourne le prix actuel de la vente\&. 
.PP
\fBReturns:\fP
.RS 4
Un float représentant le prix actuel 
.RE
.PP

.PP
Reimplemented in \fBVenteEnchere\fP\&.
.SS "void EtatVente::setDateLimite (struct tmdate)\fC [virtual]\fP"

.PP
Cette fonction virtuelle fixe la date limite\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdate\fP - Nouvelle date 
.RE
.PP

.PP
Reimplemented in \fBVenteEnchere\fP\&.
.SS "void EtatVente::setPrixActuel (floatprix)\fC [virtual]\fP"

.PP
Cette fonction virtuelle fixe le prix actuel\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprix\fP - Nouveau prix 
.RE
.PP

.PP
Reimplemented in \fBVenteEnchere\fP\&.
.SS "bool EtatVente::typeVente ()"

.PP
Cette fonction indique la type de la vente\&. Si elle retourne true, c'est une vente aux enchères, sinon c'est une vente normale\&. 
.PP
\fBReturns:\fP
.RS 4
True si c'est une vente aux enchères, false sinon 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for EMarche from the source code\&.
